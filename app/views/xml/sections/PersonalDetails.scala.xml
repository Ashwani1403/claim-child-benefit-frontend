
@import views.xml.xml.sections._

@this(line: Line)

@(model: JourneyModel)(implicit messages: Messages)

<fo:block-container margin-bottom="1cm" keep-together="always">

    <fo:block font-size="18pt" font-weight="bold" margin-bottom="0.5cm">@messages("pdf.personalDetails")</fo:block>

    @line("pdf.name", model.applicant.name.display)

    @if(model.applicant.previousFamilyNames.nonEmpty) {
        <fo:block margin-bottom="2mm">
            <fo:inline font-weight="bold">@messages("pdf.previousNames"): </fo:inline>
            <fo:inline>
                @model.applicant.previousFamilyNames.mkString(", ")
            </fo:inline>
        </fo:block>
    }

    @line("pdf.nino", model.applicant.nationalInsuranceNumber.getOrElse(messages("pdf.notKnown")))

    @line("pdf.dateOfBirth", date(model.applicant.dateOfBirth))

    @line("pdf.relationshipStatus", messages(s"relationshipStatus.${model.relationship.status.toString}"))

    @model.relationship.since.map { since =>
        @line(s"pdf.relationshipStatusDate.${model.relationship.status.toString}", date(since))
    }

    @line("pdf.currentAddress", model.applicant.currentAddress.lines.mkString(", "))

    @model.applicant.previousAddress.map { address =>
        @line("pdf.livedAtAddressOneYear", messages("site.no"))
        @line("pdf.previousAddress", address.lines.mkString(", "))
    }.getOrElse(line("pdf.livedAtAddressOneYear", messages("site.yes")))

    @line("pdf.phoneNumber", model.applicant.telephoneNumber)

    @line("pdf.bestTimeToContact", model.applicant.bestTimeToContact.map(x => messages(s"bestTimeToContact.${x.toString}")).mkString(", "))

    @line("pdf.nationality", model.applicant.nationality)

    @line("pdf.employmentStatus", model.applicant.employmentStatus.map(x => messages(s"applicantEmploymentStatus.${x.toString}")).mkString(", "))

    @line("pdf.benefits", model.benefits.map(x => messages(s"benefits.${x.toString}")).mkString(", "))

</fo:block-container>
